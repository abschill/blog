[{"content":"Many of you might be in a similar position to where I was, thinking lerna still served some sort of useful purpose in the node ecosystem, but no, it doesnt apparently.\nSince npm v7, there has been a workspaces option supported in package.json, and it allows you to run arbitrary npm commands in these workspaces the same way these external dependencies used to do. Workspaces allow you to auto symlink and set up local dependencies with their own versions for packages. You don\u0026rsquo;t have to run npm link once, who would have guessed. You can define workspaces like so:\n1 2 3 4 5 6 { \u0026#34;name\u0026#34;: \u0026#34;my-workspaces-powered-project\u0026#34;, \u0026#34;workspaces\u0026#34;: [ \u0026#34;packages/a\u0026#34; ] } This will symlink package a at that directory, and install it in node_modules when you install the package.json itself. If your project already has a package.json you can run npm init -w ./packages/a to create these lines automatically. It can also create a new project with the package workspace automatically set up, if no such package.json exists.\nrun unit tests in package a:\n1 npm run test --workspace=a run unit tests in all workspace packages:\n1 npm run test --workspaces conditional:\n1 npm run test --workspaces --if-present The moral of the story is stop using lerna. stop using lerna\n","description":"","id":41,"section":"posts","tags":null,"title":"Quick Tips - npm workspaces","uri":"https://blog.abschill.com/posts/quick-tips/npm-workspaces/"},{"content":"These 2 are commonly used to mean pretty different things in node.\nprocess.cwd() is a function that is evaluated to the working directory of the process, by default this is the directory where the process was called from (where \u0026ldquo;node index.js\u0026rdquo; was called), but can be updated during the program\u0026rsquo;s lifecycle with process.chdir. __dirname on the other hand is used to refer to the path of the module the code calling __dirname itself, is located on the system scope of process. So basically, use process.cwd() to get the directory that the process started, and __dirname to get the directory the module you\u0026rsquo;re writing in.\nimagine the following directory structure\n\u0026lt;base\u0026gt;/ index.js src/module0.js src/module0.js\n1 2 console.log(process.cwd()) console.log(__dirname); index.js\n1 require(\u0026#39;./src/module0\u0026#39;) this will print \u0026lt;base\u0026gt; and then \u0026lt;base\u0026gt;/src as absolute paths, because module0 exists inside of /src it will be returned as the __dirname\n","description":"","id":42,"section":"posts","tags":null,"title":"Quick Tips - cwd vs dirname in node","uri":"https://blog.abschill.com/posts/quick-tips/cwd-vs-dirname/"},{"content":"A good tip to keep in mind when programming is minimizing your use of else statements. When possible, exit the function context earlier given a value that establishes the given return, rather than reflecting that with an else statement to check for something else. That may sound complicated, but its not, here is an example:\nDo This\n1 2 3 4 5 6 function thing(args) { if(!args.required_thing) { throw \u0026#39;missing required thing\u0026#39;; } // do something + return, or return } Not This\n1 2 3 4 5 6 7 8 function thing(args) { if(args.required_thing) { // do something + return, or return } else { throw \u0026#39;missing required thing\u0026#39;; } } Figure 1 uses the end of the function to assume a positive result, exiting if this is not met as early as possible. This is pretty much always going to be preferred to Figure 2.\n","description":"","id":43,"section":"posts","tags":null,"title":"Quick Tips - Early Returns","uri":"https://blog.abschill.com/posts/quick-tips/early-returns/"},{"content":"As you may have noticed, there are less articles than there were before.\nI decided I wanted to remove the longer tutorial posts I had because I am simply not interested in making that longer content and will be transitioning to primarily shorter \u0026ldquo;quick tips/opinion\u0026rdquo; types of posts instead. I am at a point where id prefer to have this be as simple as possible to write new stuff so I would rather just use github markdown than something like prismic moving forward for content. Converting them is too wonky with the HTML that prismic generates unfortunately, I don\u0026rsquo;t feel like dealing with it.\nWith this new era, I will be doing a weekly series called quick tips, where I will be sharing one tip I learned each week or so with a new post. use the /posts/index.xml href on this domain subscribe via rss\n","description":"so we are using hugo now","id":44,"section":"posts","tags":["hugo","effort","themes","go language"],"title":"Welcome to my new blog again","uri":"https://blog.abschill.com/posts/welcome-new/"},{"content":"todo: write a new about section\n","description":"about abschill","id":48,"section":"","tags":null,"title":"About","uri":"https://blog.abschill.com/about/"}]